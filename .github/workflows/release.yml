name: Build & Release Aliyun CLI

on:
  push:
    tags:
      - "v*"   # 当推送版本标签时自动发布
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux (musl 静态链接)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            ext: ""
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: ".exe"
          # macOS Intel
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: ""
          # macOS ARM (Apple Silicon)
          - os: macos-latest
            target: arm-apple-darwin
            ext: ""

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools (for Linux)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          rustup target add x86_64-unknown-linux-musl

      - name: Enable static CRT for Windows
        if: matrix.target == 'x86_64-pc-windows-msvc'
        run: echo "RUSTFLAGS=-C target-feature=+crt-static" >> $env:GITHUB_ENV

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/aliyuncli${{ matrix.ext }} dist/aliyuncli-${{ matrix.target }}${{ matrix.ext }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: aliyuncli-${{ matrix.target }}
          path: dist/aliyuncli-${{ matrix.target }}${{ matrix.ext }}

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Display artifacts
        run: ls -R dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**/*       # 上传所有平台的二进制文件
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
